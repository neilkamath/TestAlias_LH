(declare-datatypes ((GHC.Maybe.Maybe 1)) ((par (T0) (GHC.Maybe.Nothing (GHC.Maybe.Just (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 T0))))))
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun GHC.Float.asin () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun snd () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun ds_d1Ot () Int)
(declare-fun len () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Float.$42$$42$ () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Float.acosh () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800591$35$$35$d1OL () Int)
(declare-fun lit$36$liquid$45$haskell$45$test$45$0.1.0.0$45$inplace$45$liquid$45$haskell$45$test () Str)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Float.asinh () Int)
(declare-fun GHC.Float.cosh () Int)
(declare-fun fst () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun papp7 () Int)
(declare-fun papp1 () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun GHC.Float.pi () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800586$35$$35$d1OG () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792800589$35$$35$d1OJ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun xs$35$$35$aFp () Str)
(declare-fun GHC.Real.divMod () Int)
(declare-fun papp4 () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_tmp$36$x$35$$35$283 () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Float.log () Int)
(declare-fun totalityError () Int)
(declare-fun lit$36$StringSpecs () Str)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun lq_karg$36$VV$35$$35$253$35$$35$k_$35$$35$254 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800585$35$$35$d1OF () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Float.tanh () Int)
(declare-fun StringSpecs.$36$trModule () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800592$35$$35$d1OM () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800590$35$$35$d1OK () Int)
(declare-fun charX () Int)
(declare-fun GHC.Float.tan () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Float.exp () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Float.cos () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun lq_tmp$36$x$35$$35$367 () Int)
(declare-fun GHC.Float.atan () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Float.acos () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun GHC.Float.atanh () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun head () Int)
(declare-fun GHC.Num.abs () Int)
(declare-fun GHC.Float.logBase () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun tail () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun ds_d1Op () Str)
(declare-fun GHC.Float.sinh () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Float.sin () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun papp6 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun GHC.Float.sqrt () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800587$35$$35$d1OH () Int)
(declare-fun StringSpecs.strLength () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792800584$35$$35$d1OE () Str)
(declare-fun apply$35$$35$29 (Int (_ BitVec 64)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$10 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$28 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$27 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$11 (Int Bool) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$24 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$35 (Int (GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$17 (Int Str) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$15 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$26 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$31 (Int (GHC.Maybe.Maybe Int)) Bool)
(declare-fun apply$35$$35$32 (Int (GHC.Maybe.Maybe Int)) Str)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$33 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$34 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 64))
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$25 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$30 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun apply$35$$35$16 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$5 (Int Int) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$29 ((_ BitVec 64)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$10 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$28 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$27 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$11 (Bool) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$24 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$35 ((GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$17 (Str) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$15 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$26 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$31 ((GHC.Maybe.Maybe Int)) Bool)
(declare-fun coerce$35$$35$32 ((GHC.Maybe.Maybe Int)) Str)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$33 ((GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$34 ((GHC.Maybe.Maybe Int)) (_ BitVec 64))
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$25 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$30 ((GHC.Maybe.Maybe Int)) Int)
(declare-fun coerce$35$$35$16 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$5 (Int) (GHC.Maybe.Maybe Int))
(declare-fun smt_lambda$35$$35$29 ((_ BitVec 64) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$28 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$35 ((GHC.Maybe.Maybe Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$17 (Str (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$15 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$31 ((GHC.Maybe.Maybe Int) Bool) Int)
(declare-fun smt_lambda$35$$35$32 ((GHC.Maybe.Maybe Int) Str) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$33 ((GHC.Maybe.Maybe Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$34 ((GHC.Maybe.Maybe Int) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$30 ((GHC.Maybe.Maybe Int) Int) Int)
(declare-fun smt_lambda$35$$35$16 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$5 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$30 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (GHC.Maybe.Maybe Int))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct lit$36$StringSpecs lit$36$liquid$45$haskell$45$test$45$0.1.0.0$45$inplace$45$liquid$45$haskell$45$test))

(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))

(assert (= (strLen lit$36$liquid$45$haskell$45$test$45$0.1.0.0$45$inplace$45$liquid$45$haskell$45$test) 55))
(assert (= (strLen lit$36$StringSpecs) 11))
(push 1)
(define-fun b$36$$35$$35$69 () Bool (= lq_anf$36$$35$$35$7205759403792800584$35$$35$d1OE lit$36$liquid$45$haskell$45$test$45$0.1.0.0$45$inplace$45$liquid$45$haskell$45$test))
(define-fun b$36$$35$$35$70 () Bool (= lq_anf$36$$35$$35$7205759403792800585$35$$35$d1OF (apply$35$$35$12 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792800584$35$$35$d1OE)))
(define-fun b$36$$35$$35$71 () Bool (= lq_anf$36$$35$$35$7205759403792800586$35$$35$d1OG lit$36$StringSpecs))
(define-fun b$36$$35$$35$72 () Bool (= lq_anf$36$$35$$35$7205759403792800587$35$$35$d1OH (apply$35$$35$12 GHC.Types.TrNameS lq_anf$36$$35$$35$7205759403792800586$35$$35$d1OG)))
(define-fun b$36$$35$$35$10 () Bool (= GHC.Num.$36$fNumInt GHC.Num.$36$fNumInt))
(define-fun b$36$$35$$35$42 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$75 () Bool (>= (apply$35$$35$12 (as len Int) ds_d1Op) 0))
(define-fun b$36$$35$$35$76 () Bool (and (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI ds_d1Op) (>= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) 0)))
(define-fun b$36$$35$$35$77 () Bool (and (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI ds_d1Op) (>= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) 0)))
(define-fun b$36$$35$$35$78 () Bool (and (apply$35$$35$13 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) (not (apply$35$$35$13 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI)) (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI (as GHC.Types.$91$$93$ Str)) (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI ds_d1Op) (= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) 0) (>= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) 0)))
(define-fun b$36$$35$$35$79 () Bool (= lq_anf$36$$35$$35$7205759403792800589$35$$35$d1OJ 0))
(define-fun b$36$$35$$35$80 () Bool (and (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI ds_d1Op) (>= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) 0)))
(define-fun b$36$$35$$35$82 () Bool (>= (apply$35$$35$12 (as len Int) xs$35$$35$aFp) 0))
(define-fun b$36$$35$$35$51 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$83 () Bool (and (apply$35$$35$13 (as is$36$GHC.Types.$58$ Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) (not (apply$35$$35$13 (as is$36$GHC.Types.$91$$93$ Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI)) (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI ds_d1Op) (= lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI (apply$35$$35$14 (apply$35$$35$0 (as GHC.Types.$58$ Int) ds_d1Ot) xs$35$$35$aFp)) (= (apply$35$$35$12 (as head Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) ds_d1Ot) (= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) (+ 1 (apply$35$$35$12 (as len Int) xs$35$$35$aFp))) (= (apply$35$$35$12 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) ds_d1Ot) (= (apply$35$$35$14 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) xs$35$$35$aFp) (= (apply$35$$35$14 (as tail Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) xs$35$$35$aFp) (>= (apply$35$$35$12 (as len Int) lq_anf$36$$35$$35$7205759403792800588$35$$35$d1OI) 0)))
(define-fun b$36$$35$$35$84 () Bool (= lq_anf$36$$35$$35$7205759403792800590$35$$35$d1OK 1))
(define-fun b$36$$35$$35$85 () Bool (and (= lq_anf$36$$35$$35$7205759403792800591$35$$35$d1OL (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792800590$35$$35$d1OK)) (= lq_anf$36$$35$$35$7205759403792800591$35$$35$d1OL lq_anf$36$$35$$35$7205759403792800590$35$$35$d1OK)))
(define-fun b$36$$35$$35$86 () Bool (and (= lq_anf$36$$35$$35$7205759403792800592$35$$35$d1OM (apply$35$$35$12 StringSpecs.strLength xs$35$$35$aFp)) (>= lq_anf$36$$35$$35$7205759403792800592$35$$35$d1OM 0)))
(define-fun b$36$$35$$35$90 () Bool (and (= VV$35$$35$F$35$$35$1 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Num.$43$ Int) lq_anf$36$$35$$35$7205759403792800591$35$$35$d1OL) lq_anf$36$$35$$35$7205759403792800592$35$$35$d1OM)) (= VV$35$$35$F$35$$35$1 (+ lq_anf$36$$35$$35$7205759403792800591$35$$35$d1OL lq_anf$36$$35$$35$7205759403792800592$35$$35$d1OM))))
(define-fun b$36$$35$$35$91 () Bool (and (= VV$35$$35$F$35$$35$2 (apply$35$$35$0 GHC.Types.I$35$ lq_anf$36$$35$$35$7205759403792800589$35$$35$d1OJ)) (= VV$35$$35$F$35$$35$2 lq_anf$36$$35$$35$7205759403792800589$35$$35$d1OJ)))
(define-fun b$36$$35$$35$92 () Bool (= VV$35$$35$F$35$$35$3 (apply$35$$35$0 (apply$35$$35$0 GHC.Types.Module lq_anf$36$$35$$35$7205759403792800585$35$$35$d1OF) lq_anf$36$$35$$35$7205759403792800587$35$$35$d1OH)))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$10 b$36$$35$$35$42 b$36$$35$$35$75 b$36$$35$$35$76 b$36$$35$$35$80 b$36$$35$$35$82 b$36$$35$$35$51 b$36$$35$$35$83 b$36$$35$$35$84 b$36$$35$$35$85 b$36$$35$$35$86 b$36$$35$$35$90))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$1 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$10 b$36$$35$$35$42 b$36$$35$$35$75 b$36$$35$$35$76 b$36$$35$$35$77 b$36$$35$$35$78 b$36$$35$$35$79 b$36$$35$$35$51 b$36$$35$$35$91))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$2 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
